

// --- Bulk scheduling endpoint (must be after app and models are initialized) ---
// Place this near other route definitions, after /schedule-tweet

// (Moved after app initialization)
// Background scheduler: checks every 30s for due scheduled tweets
setInterval(async () => {
    const now = new Date();
    try {
        const dueTweets = await ScheduledTweet.findAll({
            where: {
                status: 'pending',
                scheduledTime: { [require('sequelize').Op.lte]: now }
            }
        });
        for (const tweet of dueTweets) {
            try {
                // Post the tweet using the same logic as /post-tweet
                let twitterClient = new TwitterApi({
                    appKey: tweet.twitterApiKey,
                    appSecret: tweet.twitterApiSecret,
                    accessToken: tweet.twitterAccessToken,
                    accessSecret: tweet.twitterAccessSecret,
                });
                let mediaId = null;
                if (tweet.imageUrl) {
                    // Download and upload image
                    const response = await fetch(tweet.imageUrl);
                    if (!response.ok) throw new Error('Failed to fetch image from URL');
                    const buffer = await response.buffer();
                    let ext = 'jpg';
                    if (tweet.imageUrl.endsWith('.png') || response.headers.get('content-type') === 'image/png') ext = 'png';
                    const tempPath = `uploads/scheduled-image-${Date.now()}.${ext}`;
                    require('fs').writeFileSync(tempPath, buffer);
                    mediaId = await twitterClient.v1.uploadMedia(tempPath);
                    require('fs').unlinkSync(tempPath);
                }
                const tweetPayload = { text: tweet.content };
                if (mediaId) tweetPayload.media = { media_ids: [mediaId] };
                const posted = await twitterClient.v2.tweet(tweetPayload);
                tweet.status = 'posted';
                tweet.postedTweetId = posted.data.id;
                await tweet.save();
                // Also save to Tweet table
                await Tweet.create({
                    userName: tweet.userName || 'Unknown',
                    content: tweet.content,
                    imageUrl: tweet.imageUrl || null,
                    twitterId: posted.data.id
                });
                console.log('Scheduled tweet posted:', posted.data.id);
            } catch (err) {
                tweet.status = 'failed';
                tweet.errorMessage = err.message;
                await tweet.save();
                console.error('Failed to post scheduled tweet:', err);
            }
        }
    } catch (err) {
        console.error('Scheduler error:', err);
    }
}, 30000);
// --- Sanitization helpers ---
// ...existing code...
// --- Sanitization helpers ---
const sanitizeInput = (str) => {
  if (typeof str !== 'string') return '';
  // Remove script tags and trim
  return str.replace(/<script.*?>.*?<\/script>/gi, '').replace(/[<>]/g, '').trim();
};

const sanitizeOutput = (str) => {
  if (typeof str !== 'string') return '';
  // Remove dangerous HTML and angle brackets
  let clean = str.replace(/<script.*?>.*?<\/script>/gi, '').replace(/[<>]/g, '');
  // Remove references to AI providers and generic AI mentions (case-insensitive, more aggressive)
  clean = clean.replace(/(OpenAI|Gemini|Perplexity|ChatGPT|Google AI|Anthropic|Claude|GPT-4|GPT-3|Bard|Llama|Meta AI|AI[- ]?powered|AI[- ]?generated|AI[- ]?assistant|AI[- ]?model|AI[- ]?system|AI[- ]?tool|AI[- ]?content|AI[- ]?response|AI[- ]?output|AI[- ]?suggestion|AI[- ]?tweet|AI[- ]?thread|AI\b|artificial intelligence|powered by AI|powered by artificial intelligence|by AI|using AI|created by AI|generated by AI|generated with AI|written by AI|written with AI|assistant|language model|machine learning model|machine learning)/gi, '');
  // Remove brackets [] () {} and equal signs
  clean = clean.replace(/[\[\](){}=]/g, '');
  // Remove extra whitespace left by replacements
  clean = clean.replace(/\s{2,}/g, ' ');
  return clean.trim();
};
// Helper to validate API keys (not empty, not placeholder)
function isValidOpenAIKey(key) {
    if (!key || typeof key !== 'string') return false;
    const trimmed = key.trim();
    // OpenAI keys typically start with 'sk-' and are longer than 20 chars
    return trimmed.startsWith('sk-') && trimmed.length > 20;
}

// Provider-specific key validator
function isValidKey(key, provider) {
  if (!key || typeof key !== 'string') return false;
  const trimmed = key.trim();
  if (provider === 'openai') return trimmed.startsWith('sk-') && trimmed.length > 20;
  if (provider === 'perplexity') return trimmed.startsWith('pplx-') && trimmed.length > 20;
  if (provider === 'gemini') return trimmed.startsWith('AIza') && trimmed.length > 20;
  return false;
}
require('dotenv').config({ path: __dirname + '/.env' });

const express = require('express');
const cors = require('cors');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { TwitterApi } = require('twitter-api-v2');
// const OpenAI = require('openai');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const OpenAI = require('openai');
const fetch = require('node-fetch');
const sequelize = require('./db');

const app = express();

// Parse JSON bodies for all requests
app.use(express.json());

// Enable CORS for all routes
app.use(cors());

const TweetModel = require('./models/tweet');
const ScheduledTweetModel = require('./models/scheduledTweet');

// Initialize Sequelize models
const Tweet = TweetModel(sequelize);
const ScheduledTweet = ScheduledTweetModel(sequelize);

sequelize.sync().then(() => {
    console.log('Database synced!');
});


// Configure multer for image uploads
const upload = multer({
    dest: 'uploads/',
    limits: {
        fileSize: 10 * 1024 * 1024, // 5MB limit
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Only image files are allowed!'), false);
        }
    }
});

// Create uploads directory if it doesn't exist
if (!fs.existsSync('uploads')) {
    fs.mkdirSync('uploads');
}

const ACCESS_CODE = process.env.ACCESS_CODE || "tweetmaster2025";
const PORT = process.env.PORT || 5000;

// OpenAI support removed

let openaiClient = null;
if (process.env.OPENAI_API_KEY){
    openaiClient = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY,
    });
    console.log('OpenAI API initialized successfully');
} else{
    console.log('OpenAI API key not found. OpenAI fallback disabled.');
}

// Initialize Gemini client
let geminiClient = null;
let geminiModel = null;
if (process.env.GEMINI_API_KEY) {
    geminiClient = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    geminiModel = geminiClient.getGenerativeModel({ model: "gemini-1.5-flash" });
    console.log('Gemini AI initialized successfully');
} else {
    console.log('Gemini API key not found.');
}

// Initialize Twitter client
let twitterClient = null;
if (process.env.TWITTER_API_KEY && process.env.TWITTER_API_SECRET && 
    process.env.TWITTER_ACCESS_TOKEN && process.env.TWITTER_ACCESS_SECRET) {
    
    twitterClient = new TwitterApi({
        appKey: process.env.TWITTER_API_KEY,
        appSecret: process.env.TWITTER_API_SECRET,
        accessToken: process.env.TWITTER_ACCESS_TOKEN,
        accessSecret: process.env.TWITTER_ACCESS_SECRET,
    });
    console.log('Twitter API initialized successfully');
} else {
    console.log('Twitter API keys not found. Tweet posting disabled.');
}

// Health check endpoint for Railway
app.get('/', (req, res) => {
    res.json({ 
        status: 'Tweet Automator Backend is running!',
        timestamp: new Date().toISOString(),
        services: {
            twitter: !!twitterClient,
            gemini: !!geminiClient,
            // openai: !!openaiClient
        }
    });
});

// Auth endpoint
app.post('/auth', (req, res) => {
    const { password } = req.body;
    if (password === ACCESS_CODE) {
        res.json({ success: true, message: "Access granted!" });
    } else {
        res.json({ success: false, message: "Invalid access code" });
    }
});

// Generate tweet endpoint
app.post('/generate-tweet', async (req, res) => {
    // Sanitize input
    req.body.aiPrompt = sanitizeInput(req.body.aiPrompt);
    // Log received API keys and provider for debugging
    console.log('Received API keys:', {
        perplexityApiKey: !!req.body.perplexityApiKey,
        geminiApiKey: !!req.body.geminiApiKey,
        openaiApiKey: !!req.body.openaiApiKey
    });
    const {
        userName,
        openaiApiKey,
        perplexityApiKey,
        geminiApiKey,
        twitterApiKey,
        twitterApiSecret,
        twitterAccessToken,
        twitterAccessSecret,
        aiPrompt,
        useOwnKeys // true if user provides their own keys, false for pre-existing
    } = req.body;

    // Strictly use only keys from the selected source
    let validPerplexityKey, validGeminiKey, validOpenaiKey, providerOrder;
    if (useOwnKeys) {
        // Only use keys provided by the user, never fallback to .env
        validPerplexityKey = isValidKey(perplexityApiKey, 'perplexity') ? perplexityApiKey : null;
        validGeminiKey = isValidKey(geminiApiKey, 'gemini') ? geminiApiKey : null;
        validOpenaiKey = isValidKey(openaiApiKey, 'openai') ? openaiApiKey : null;
        providerOrder = [];
        // Only add provider if key is present AND provider is selected by frontend
        if (req.body.aiProviders && Array.isArray(req.body.aiProviders)) {
            if (validPerplexityKey && req.body.aiProviders.includes('perplexity')) providerOrder.push('perplexity');
            if (validOpenaiKey && req.body.aiProviders.includes('openai')) providerOrder.push('openai');
            if (validGeminiKey && req.body.aiProviders.includes('gemini')) providerOrder.push('gemini');
        } else {
            // fallback: add any valid key
            if (validPerplexityKey) providerOrder.push('perplexity');
            if (validOpenaiKey) providerOrder.push('openai');
            if (validGeminiKey) providerOrder.push('gemini');
        }
    } else {
        // Only use keys from .env, never use user-provided keys
        validPerplexityKey = isValidKey(process.env.PERPLEXITY_API_KEY, 'perplexity') ? process.env.PERPLEXITY_API_KEY : null;
        validGeminiKey = isValidKey(process.env.GEMINI_API_KEY, 'gemini') ? process.env.GEMINI_API_KEY : null;
        validOpenaiKey = isValidKey(process.env.OPENAI_API_KEY, 'openai') ? process.env.OPENAI_API_KEY : null;
        providerOrder = [];
        if (validPerplexityKey) providerOrder.push('perplexity');
        if (validOpenaiKey) providerOrder.push('openai');
        if (validGeminiKey) providerOrder.push('gemini');
    }
    // Extra debug log
    console.log('Provider order:', providerOrder);
    console.log('Valid keys:', { validPerplexityKey, validGeminiKey, validOpenaiKey });

    // Always generate a tweet specifically about what the user asked
    const prompt = aiPrompt && aiPrompt.trim()
        ? `Generate an engaging, creative tweet specifically about: ${aiPrompt}. Include relevant emojis if appropriate.`
        : `Generate an engaging, creative tweet about any topic. Include relevant emojis if appropriate.`;

    const axios = require('axios');
    let generatedTweet = '';
    try {
        for (const provider of providerOrder) {
            if (provider === 'perplexity' && validPerplexityKey && !generatedTweet) {
                console.log('Trying Perplexity API key:', validPerplexityKey);
                try {
                    const resp = await axios.post('https://api.perplexity.ai/chat/completions', {
                        model: 'sonar-pro',
                        messages: [{ role: 'user', content: prompt }],
                    }, {
                        headers: { 'Authorization': `Bearer ${validPerplexityKey}` }
                    });
                    generatedTweet = resp.data.choices[0].message.content.trim();
                    console.log('✅ Generated tweet with Perplexity:', generatedTweet);
                } catch (err) {
                    console.error('Perplexity error:', err?.response?.data || err?.message || err);
                }
            }
            if (provider === 'openai' && validOpenaiKey && !generatedTweet) {
                try {
                    const OpenAI = require('openai');
                    const openaiClient = new OpenAI({ apiKey: validOpenaiKey });
                    const completion = await openaiClient.chat.completions.create({
                        model: "gpt-3.5-turbo",
                        messages: [
                            {
                                role: "system",
                                content: "You are a social media expert creating engaging, concise, and shareable tweets. Keep each tweet under 280 characters, add personality, and encourage engagement.\n\n"
                            },
                            {
                                role: "user",
                                content: prompt
                            }
                        ],
                        max_tokens: 100,
                        temperature: 0.8,
                    });
                    generatedTweet = completion.choices[0].message.content.trim();
                    console.log('✅ Generated tweet with OpenAI:', generatedTweet);
                } catch (err) {
                    console.error('OpenAI error:', err?.response?.data || err?.message || err);
                }
            }
            if (provider === 'gemini' && validGeminiKey && !generatedTweet) {
                try {
                    const { GoogleGenerativeAI } = require('@google/generative-ai');
                    const geminiClient = new GoogleGenerativeAI(validGeminiKey);
                    const geminiModel = geminiClient.getGenerativeModel({ model: "gemini-1.5-flash" });
                    const result = await geminiModel.generateContent(
                        `You are a social media expert creating engaging, concise, and shareable tweets. Keep each tweet under 280 characters, add personality, and encourage engagement.\n\n${prompt}`
                    );
                    const response = result.response;
                    generatedTweet = response.text().trim();
                    console.log('✅ Generated tweet with Gemini:', generatedTweet);
                } catch (err) {
                    console.error('Gemini error:', err?.response?.data || err?.message || err);
                }
            }
        }
        if (!generatedTweet) {
            return res.json({
                success: false,
                message: "AI generation disabled. Add Perplexity, Gemini, or OpenAI API key to enable this feature."
            });
        }
        // Remove quotes if the AI added them
        const cleanTweet = sanitizeOutput(generatedTweet.replace(/^[["']|["']]$/g, ''));
        const wordCount = cleanTweet.split(/\s+/).filter(Boolean).length;
        if (wordCount > 280) {
            return res.json({ success: false, message: "Tweet content exceeds 280 words." });
        }
        res.json({
            success: true,
            content: cleanTweet,
            message: "Tweet generated successfully!"
        });
    } catch (error) {
        console.error('❌ Error generating tweet:', error);
        res.status(500).json({
            success: false,
            message: "Failed to generate tweet",
            error: error.message
        });
    }
});

// --- /generate-ai-image endpoint (fixed) ---
app.post('/generate-ai-image', async (req, res) => {
    console.log('=== IMAGE GENERATION DEBUG ===');
    console.log('Request body:', JSON.stringify(req.body, null, 2));
    console.log('Content-Type:', req.headers['content-type']);

    const { prompt, useOwnKeys, openaiApiKey } = req.body;

    console.log('Extracted values:');
    console.log('- prompt:', prompt);
    console.log('- useOwnKeys:', useOwnKeys);
    console.log('- openaiApiKey length:', openaiApiKey ? openaiApiKey.length : 0);

    // Simple prompt validation
    if (!prompt || typeof prompt !== 'string' || !prompt.trim()) {
        return res.status(400).json({
            success: false,
            message: "Prompt is required and cannot be empty."
        });
    }

    // Simple OpenAI key validation
    let validOpenaiKey;
    if (useOwnKeys) {
        if (openaiApiKey && typeof openaiApiKey === 'string' && openaiApiKey.trim().startsWith('sk-') && openaiApiKey.trim().length > 20) {
            validOpenaiKey = openaiApiKey.trim();
            console.log('Using user-provided OpenAI key');
        } else {
            console.log('Invalid user-provided OpenAI key');
            return res.status(400).json({
                success: false,
                message: "Valid OpenAI API key required (must start with 'sk-' and be longer than 20 chars)"
            });
        }
    } else {
        validOpenaiKey = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.trim().startsWith('sk-') && process.env.OPENAI_API_KEY.trim().length > 20 ? process.env.OPENAI_API_KEY.trim() : null;
        console.log('Using environment OpenAI key:', !!validOpenaiKey);
    }

    if (!validOpenaiKey) {
        return res.status(400).json({
            success: false,
            message: "No valid OpenAI API key available."
        });
    }

    const cleanPrompt = prompt.trim();
    const enhancedPrompt = `Create a high-quality, visually engaging image for social media. ${cleanPrompt}`;

    try {
        console.log('Attempting OpenAI image generation...');
        const openaiClient = new OpenAI({ apiKey: validOpenaiKey });
        const response = await openaiClient.images.generate({
            prompt: enhancedPrompt,
            n: 1,
            size: "1024x1024",
            response_format: "url"
        });
        console.log('OpenAI image generation successful');
        return res.json({
            success: true,
            image: response.data[0].url,
            provider: "openai"
        });
    } catch (error) {
        console.error('OpenAI error:', error);
        if (error.code === 'invalid_api_key') {
            return res.status(401).json({
                success: false,
                message: "Invalid OpenAI API key. Please check your key and try again.",
                error: "Authentication failed"
            });
        }
        if (error.code === 'insufficient_quota') {
            return res.status(402).json({
                success: false,
                message: "OpenAI API quota exceeded. Please check your billing.",
                error: "Quota exceeded"
            });
        }
        return res.status(500).json({
            success: false,
            message: "Image generation failed",
            error: error.message
        });
    }
});

// --- /generate-thread endpoint ---
app.post('/generate-thread', async (req, res) => {
    const { prompt, aiProviders, useOwnKeys, perplexityApiKey, geminiApiKey, openaiApiKey } = req.body;
    const cleanPrompt = sanitizeInput(prompt);
    if (!cleanPrompt) {
        return res.status(400).json({ success: false, message: 'Prompt is required to generate a thread.' });
    }

    // Determine which keys to use (mirroring /generate-tweet logic)
    let validPerplexityKey, validGeminiKey, validOpenaiKey, providerOrder;
    if (useOwnKeys) {
        validPerplexityKey = perplexityApiKey && typeof perplexityApiKey === 'string' && perplexityApiKey.trim() ? perplexityApiKey : null;
        validGeminiKey = geminiApiKey && typeof geminiApiKey === 'string' && geminiApiKey.trim() ? geminiApiKey : null;
        validOpenaiKey = openaiApiKey && typeof openaiApiKey === 'string' && openaiApiKey.trim() ? openaiApiKey : null;
        providerOrder = [];
        if (aiProviders && Array.isArray(aiProviders)) {
            if (validPerplexityKey && aiProviders.includes('perplexity')) providerOrder.push('perplexity');
            if (validOpenaiKey && aiProviders.includes('openai')) providerOrder.push('openai');
            if (validGeminiKey && aiProviders.includes('gemini')) providerOrder.push('gemini');
        } else {
            if (validPerplexityKey) providerOrder.push('perplexity');
            if (validOpenaiKey) providerOrder.push('openai');
            if (validGeminiKey) providerOrder.push('gemini');
        }
    } else {
        validPerplexityKey = process.env.PERPLEXITY_API_KEY && process.env.PERPLEXITY_API_KEY.trim() ? process.env.PERPLEXITY_API_KEY : null;
        validGeminiKey = process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY.trim() ? process.env.GEMINI_API_KEY : null;
        validOpenaiKey = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.trim() ? process.env.OPENAI_API_KEY : null;
        providerOrder = [];
        if (validPerplexityKey) providerOrder.push('perplexity');
        if (validOpenaiKey) providerOrder.push('openai');
        if (validGeminiKey) providerOrder.push('gemini');
    }

    let threadTweets = [];
    try {
        let aiError = null;
        for (const provider of providerOrder) {
            if (provider === 'perplexity' && validPerplexityKey && threadTweets.length === 0) {
                try {
                    const axios = require('axios');
                    const resp = await axios.post('https://api.perplexity.ai/chat/completions', {
                        model: 'sonar-pro',
                        messages: [{ role: 'user', content: `Generate a Twitter thread of 5 tweets about: ${cleanPrompt}\n\nEach tweet should be under 280 characters. Return as a numbered list, one tweet per line.` }],
                    }, {
                        headers: { 'Authorization': `Bearer ${validPerplexityKey}` }
                    });
                    const text = resp.data.choices[0].message.content;
                    threadTweets = text.split(/\n+/).map(line => sanitizeOutput(line.replace(/^\d+\.\s*/, ''))).filter(Boolean);
                } catch (err) {
                    aiError = err;
                }
            }
            if (provider === 'openai' && validOpenaiKey && threadTweets.length === 0) {
                try {
                    const OpenAI = require('openai');
                    const openaiClient = new OpenAI({ apiKey: validOpenaiKey });
                    const openaiPrompt = `Generate a Twitter thread of 5 tweets about: ${cleanPrompt}\n\nEach tweet should be under 280 characters. Return as a numbered list, one tweet per line.`;
                    const completion = await openaiClient.chat.completions.create({
                        model: "gpt-3.5-turbo",
                        messages: [
                            { role: "system", content: "You are a social media expert creating engaging, concise, and shareable Twitter threads." },
                            { role: "user", content: openaiPrompt }
                        ],
                        max_tokens: 500,
                        temperature: 0.8,
                    });
                    const text = completion.choices[0].message.content;
                    threadTweets = text.split(/\n+/).map(line => sanitizeOutput(line.replace(/^\d+\.\s*/, ''))).filter(Boolean);
                } catch (err) {
                    aiError = err;
                }
            }
            if (provider === 'gemini' && validGeminiKey && threadTweets.length === 0) {
                try {
                    const { GoogleGenerativeAI } = require('@google/generative-ai');
                    const genAI = new GoogleGenerativeAI(validGeminiKey);
                    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
                    const geminiPrompt = `Generate a Twitter thread of 5 tweets about: ${cleanPrompt}\n\nEach tweet should be under 280 characters. Return as a numbered list, one tweet per line.`;
                    const result = await model.generateContent([{ text: geminiPrompt }]);
                    const text = result.response.text();
                    threadTweets = text.split(/\n+/).map(line => sanitizeOutput(line.replace(/^\d+\.\s*/, ''))).filter(Boolean);
                } catch (err) {
                    aiError = err;
                }
            }
        }
        if (!Array.isArray(threadTweets) || threadTweets.length === 0) {
            return res.status(500).json({ success: false, message: 'AI did not return any tweets.', error: aiError ? aiError.message : undefined });
        }
        res.json({ success: true, tweets: threadTweets });
    } catch (error) {
        console.error('Error generating thread:', error);
        res.status(500).json({ success: false, message: 'Failed to generate thread', error: error.message });
    }
});

// --- end /generate-ai-image endpoint ---

// Post tweet to X/Twitter
app.post('/post-tweet', upload.single('image'), async (req, res) => {
    const {
        twitterApiKey,
        twitterApiSecret,
        twitterAccessToken,
        twitterAccessSecret,
        content,
        imageUrl // new: allow imageUrl in body
    } = req.body;

    // Validate all required Twitter keys
    if (!twitterApiKey || !twitterApiSecret || !twitterAccessToken || !twitterAccessSecret) {
        return res.status(400).json({
            success: false,
            message: "All Twitter API keys (API key, API secret, Access token, Access secret) are required to post a tweet."
        });
    }

    // Initialize Twitter client for this request
    let twitterClient = new TwitterApi({
        appKey: twitterApiKey,
        appSecret: twitterApiSecret,
        accessToken: twitterAccessToken,
        accessSecret: twitterAccessSecret,
    });

    try {
        if (!content) {
            return res.status(400).json({
                success: false,
                message: "Tweet content is required."
            });
        }

        if (content.length > 280) {
            return res.status(400).json({
                success: false,
                message: "Tweet content exceeds 280 characters."
            });
        }

        let mediaId = null;

        // If image is uploaded, upload it to Twitter first
        if (req.file) {
            try {
                console.log('Uploading image to Twitter...');
                const mediaUpload = await twitterClient.v1.uploadMedia(req.file.path);
                mediaId = mediaUpload;
                console.log('Image uploaded successfully, media ID:', mediaId);
                
                // Clean up the uploaded file
                fs.unlinkSync(req.file.path);
            } catch (imageError) {
                console.error('Error uploading image:', imageError);
                // Clean up the uploaded file
                if (fs.existsSync(req.file.path)) {
                    fs.unlinkSync(req.file.path);
                }
                return res.status(500).json({
                    success: false,
                    message: "Failed to upload image",
                    error: imageError.message
                });
            }
        } else if (imageUrl) {
            // If imageUrl is provided, fetch and upload
            try {
                console.log('Fetching image from URL for Twitter upload...');
                const response = await fetch(imageUrl);
                if (!response.ok) throw new Error('Failed to fetch image from URL');
                const buffer = await response.buffer();
                // Guess file type from URL or response headers
                let ext = 'jpg';
                if (imageUrl.endsWith('.png') || response.headers.get('content-type') === 'image/png') ext = 'png';
                const tempPath = `uploads/ai-image-${Date.now()}.${ext}`;
                fs.writeFileSync(tempPath, buffer);
                const mediaUpload = await twitterClient.v1.uploadMedia(tempPath);
                mediaId = mediaUpload;
                fs.unlinkSync(tempPath);
                console.log('Image from URL uploaded successfully, media ID:', mediaId);
            } catch (imageUrlError) {
                console.error('Error uploading image from URL:', imageUrlError);
                return res.status(500).json({
                    success: false,
                    message: "Failed to upload image from URL",
                    error: imageUrlError.message
                });
            }
        }
        
        // Post the tweet with or without image
        const tweetPayload = { text: content };
        if (mediaId) {
            tweetPayload.media = { media_ids: [mediaId] };
        }
        
        const tweet = await twitterClient.v2.tweet(tweetPayload);
        
        console.log('Tweet posted successfully:', tweet.data.id);

        // Save tweet to the database
        await Tweet.create({
            userName: req.body.userName || "Unknown",
            content: content,
            imageUrl: imageUrl || null,
            twitterId: tweet && tweet.data && tweet.data.id ? tweet.data.id : null,
        })
        
        res.json({
            success: true,
            message: "Tweet posted successfully!",
            tweetId: tweet.data.id,
            tweetUrl: `https://twitter.com/user/status/${tweet.data.id}`,
            hasImage: !!mediaId
        });
        
    } catch (error) {
        console.error('Error posting tweet:', error);
        
        // Clean up uploaded file if it exists
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
        }
        
        res.status(500).json({
            success: false,
            message: "Failed to post tweet",
            error: error.message
        });
    }
});


// This endpoint handles GET requests to /tweet-history
app.get('/tweet-history', async (req, res) => {
    try {
        const tweets = await Tweet.findAll({
            order: [['createdAt', 'DESC']]
        });
        res.json({
            success: true,
            tweets: tweets
        });
    } catch (error) {
        console.error('Error fetching tweet history:', error);
        res.status(500).json({
            success: false,
            message: "Failed to fetch tweet history",
            error: error.message
        });
    }
});

// This endpoint handles DELETE requests to /tweet-history/:id
app.delete('/tweet-history/:id', express.json(), async (req, res) => {
    try {
        const tweetId = req.params.id;
        const tweet = await Tweet.findByPk(tweetId);
        if (!tweet) {
            return res.status(404).json({ success: false, message: "Tweet not found" });
        }

        // Use credentials from request body if provided
        const { twitterApiKey, twitterApiSecret, twitterAccessToken, twitterAccessSecret } = req.body || {};
        let deleteClient = null;
        if (twitterApiKey && twitterApiSecret && twitterAccessToken && twitterAccessSecret) {
            const { TwitterApi } = require('twitter-api-v2');
            deleteClient = new TwitterApi({
                appKey: twitterApiKey,
                appSecret: twitterApiSecret,
                accessToken: twitterAccessToken,
                accessSecret: twitterAccessSecret,
            });
        } else if (global.twitterClient) {
            deleteClient = global.twitterClient;
        }

        // Delete from Twitter if twitterId exists and we have a client
        if (tweet.twitterId && deleteClient) {
            try {
                await deleteClient.v2.deleteTweet(tweet.twitterId);
            } catch (err) {
                console.error("Error deleting from Twitter:", err);
                // Optionally, you can return an error here or just log it
            }
        }
        await tweet.destroy();
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ success: false, message: "Failed to delete tweet", error: error.message });
    }
});

// Test endpoint
app.get('/ping', (req, res) => {
    res.json({ message: 'pong' });
});


// --- /post-thread endpoint ---
app.post('/post-thread', async (req, res) => {
    const {
        tweets,
        userName,
        twitterApiKey,
        twitterApiSecret,
        twitterAccessToken,
        twitterAccessSecret
    } = req.body;

    if (!Array.isArray(tweets) || tweets.length === 0) {
        return res.status(400).json({ success: false, message: 'No tweets provided.' });
    }
    if (!twitterApiKey || !twitterApiSecret || !twitterAccessToken || !twitterAccessSecret) {
        return res.status(400).json({
            success: false,
            message: "All Twitter API keys (API key, API secret, Access token, Access secret) are required to post a thread."
        });
    }

    // Initialize Twitter client for this request
    let twitterClient = new TwitterApi({
        appKey: twitterApiKey,
        appSecret: twitterApiSecret,
        accessToken: twitterAccessToken,
        accessSecret: twitterAccessSecret,
    });

    try {
        let previousTweetId = null;
        const threadIds = [];
        const threadUrls = [];
        for (let i = 0; i < tweets.length; i++) {
            const tweetText = tweets[i];
            const wordCount = tweetText.split(/\s+/).filter(Boolean).length;
            if (!tweetText || tweetText.length > 280 || wordCount > 280) {
                return res.status(400).json({
                    success: false,
                    message: `Tweet #${i + 1} is empty or exceeds 280 characters or 280 words.`
                });
            }
            const tweetPayload = { text: tweetText };
            if (previousTweetId) {
                tweetPayload.reply = { in_reply_to_tweet_id: previousTweetId };
            }
            const tweet = await twitterClient.v2.tweet(tweetPayload);
            const tweetId = tweet.data.id;
            threadIds.push(tweetId);
            threadUrls.push(`https://twitter.com/user/status/${tweetId}`);
            previousTweetId = tweetId;

            // Save each tweet to the database
            await Tweet.create({
                userName: userName || "Unknown",
                content: tweetText,
                imageUrl: null,
                twitterId: tweetId,
            });
        }
        res.json({
            success: true,
            message: `Thread posted successfully by ${userName || 'user'}`,
            threadIds,
            threadUrls
        });
    } catch (error) {
        console.error('Error posting thread:', error);
        res.status(500).json({
            success: false,
            message: "Failed to post thread",
            error: error.message
        });
    }
});
// --- /schedule-tweet endpoint ---
app.post('/schedule-tweet', async (req, res) => {
    try {
        const {
            userName,
            content,
            imageUrl,
            scheduledTime,
            twitterApiKey,
            twitterApiSecret,
            twitterAccessToken,
            twitterAccessSecret
        } = req.body;

        // Basic validation
        if (!userName || !content || !scheduledTime || !twitterApiKey || !twitterApiSecret || !twitterAccessToken || !twitterAccessSecret) {
            return res.status(400).json({ success: false, message: 'Missing required fields.' });
        }
        if (content.length > 280) {
            return res.status(400).json({ success: false, message: 'Tweet content exceeds 280 characters.' });
        }

        // Save to ScheduledTweet table
        await ScheduledTweet.create({
            userName,
            content,
            imageUrl: imageUrl || null,
            scheduledTime,
            twitterApiKey,
            twitterApiSecret,
            twitterAccessToken,
            twitterAccessSecret,
            status: 'pending'
        });

        res.json({ success: true, message: 'Tweet scheduled successfully!' });
    } catch (error) {
        console.error('Error scheduling tweet:', error);
        res.status(500).json({ success: false, message: 'Failed to schedule tweet', error: error.message });
    }
});


// --- View scheduled tweets endpoint ---
app.get('/scheduled-tweets', async (req, res) => {
    try {
        const scheduledTweets = await ScheduledTweet.findAll({
            order: [['scheduledTime', 'ASC']]
        });
        res.json({ success: true, scheduledTweets });
    } catch (error) {
        console.error('Error fetching scheduled tweets:', error);
        res.status(500).json({ success: false, message: 'Failed to fetch scheduled tweets', error: error.message });
    }
});

app.post('/test-alive', (req, res) => res.json({ ok: true }));

// --- Bulk tweet generation endpoint ---
app.post('/generate-bulk-tweets', async (req, res) => {
    const { prompts, aiProviders, useOwnKeys, perplexityApiKey, geminiApiKey, openaiApiKey } = req.body;
    if (!Array.isArray(prompts) || prompts.length === 0) {
        return res.status(400).json({ success: false, message: 'No prompts provided.' });
    }
    // Limit to 25 prompts
    if (prompts.length > 25) {
        return res.status(400).json({ success: false, message: 'Maximum 25 prompts allowed.' });
    }
    // Prepare provider keys (mirroring /generate-tweet logic)
    let validPerplexityKey, validGeminiKey, validOpenaiKey, providerOrder;
    if (useOwnKeys) {
        validPerplexityKey = perplexityApiKey && typeof perplexityApiKey === 'string' && perplexityApiKey.trim() ? perplexityApiKey : null;
        validGeminiKey = geminiApiKey && typeof geminiApiKey === 'string' && geminiApiKey.trim() ? geminiApiKey : null;
        validOpenaiKey = openaiApiKey && typeof openaiApiKey === 'string' && openaiApiKey.trim() ? openaiApiKey : null;
        providerOrder = [];
        if (aiProviders && Array.isArray(aiProviders)) {
            if (validPerplexityKey && aiProviders.includes('perplexity')) providerOrder.push('perplexity');
            if (validOpenaiKey && aiProviders.includes('openai')) providerOrder.push('openai');
            if (validGeminiKey && aiProviders.includes('gemini')) providerOrder.push('gemini');
        } else {
            if (validPerplexityKey) providerOrder.push('perplexity');
            if (validOpenaiKey) providerOrder.push('openai');
            if (validGeminiKey) providerOrder.push('gemini');
        }
    } else {
        validPerplexityKey = process.env.PERPLEXITY_API_KEY && process.env.PERPLEXITY_API_KEY.trim() ? process.env.PERPLEXITY_API_KEY : null;
        validGeminiKey = process.env.GEMINI_API_KEY && process.env.GEMINI_API_KEY.trim() ? process.env.GEMINI_API_KEY : null;
        validOpenaiKey = process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.trim() ? process.env.OPENAI_API_KEY : null;
        providerOrder = [];
        if (validPerplexityKey) providerOrder.push('perplexity');
        if (validOpenaiKey) providerOrder.push('openai');
        if (validGeminiKey) providerOrder.push('gemini');
    }
    // Log which keys/providers are being used for bulk generation
    console.log('BULK GENERATION DEBUG:');
    console.log('Provider order:', providerOrder);
    console.log('Valid keys:', {
        validPerplexityKey: !!validPerplexityKey,
        validGeminiKey: !!validGeminiKey,
        validOpenaiKey: !!validOpenaiKey
    });
    const axios = require('axios');
    const results = [];
    for (let i = 0; i < prompts.length; i++) {
        const prompt = prompts[i];
        let generatedTweet = '';
        let error = null;
        for (const provider of providerOrder) {
            if (provider === 'perplexity' && validPerplexityKey && !generatedTweet) {
                try {
                    console.log(`[BULK][Prompt #${i+1}] Using Perplexity API key:`, validPerplexityKey.slice(0, 8) + '...' );
                    const resp = await axios.post('https://api.perplexity.ai/chat/completions', {
                        model: 'sonar-pro',
                        messages: [{ role: 'user', content: `Generate an engaging, creative tweet specifically about: ${prompt}. Include relevant emojis if appropriate.` }],
                    }, {
                        headers: { 'Authorization': `Bearer ${validPerplexityKey}` }
                    });
                    generatedTweet = resp.data.choices[0].message.content.trim();
                } catch (err) {
                    error = err?.response?.data || err?.message || err;
                }
            }
            if (provider === 'openai' && validOpenaiKey && !generatedTweet) {
                try {
                    console.log(`[BULK][Prompt #${i+1}] Using OpenAI API key:`, validOpenaiKey.slice(0, 8) + '...' );
                    const OpenAI = require('openai');
                    const openaiClient = new OpenAI({ apiKey: validOpenaiKey });
                    const completion = await openaiClient.chat.completions.create({
                        model: "gpt-3.5-turbo",
                        messages: [
                            { role: "system", content: "You are a social media expert creating engaging, concise, and shareable tweets. Keep each tweet under 280 characters, add personality, and encourage engagement." },
                            { role: "user", content: `Generate an engaging, creative tweet specifically about: ${prompt}. Include relevant emojis if appropriate.` }
                        ],
                        max_tokens: 100,
                        temperature: 0.8,
                    });
                    generatedTweet = completion.choices[0].message.content.trim();
                } catch (err) {
                    error = err?.response?.data || err?.message || err;
                }
            }
            if (provider === 'gemini' && validGeminiKey && !generatedTweet) {
                try {
                    console.log(`[BULK][Prompt #${i+1}] Using Gemini API key:`, validGeminiKey.slice(0, 8) + '...' );
                    const { GoogleGenerativeAI } = require('@google/generative-ai');
                    const geminiClient = new GoogleGenerativeAI(validGeminiKey);
                    const geminiModel = geminiClient.getGenerativeModel({ model: "gemini-1.5-flash" });
                    const result = await geminiModel.generateContent(
                        `You are a social media expert creating engaging, concise, and shareable tweets. Keep each tweet under 280 characters, add personality, and encourage engagement.\n\nGenerate an engaging, creative tweet specifically about: ${prompt}. Include relevant emojis if appropriate.`
                    );
                    const response = result.response;
                    generatedTweet = response.text().trim();
                } catch (err) {
                    error = err?.response?.data || err?.message || err;
                }
            }
        }
        // Sanitize and check length
        const cleanTweet = generatedTweet ? sanitizeOutput(generatedTweet.replace(/^[\["']|[\]"']$/g, '')) : '';
        if (cleanTweet.length > 280) {
            results.push({ prompt, tweet: '', error: 'Generated tweet exceeds 280 characters.' });
        } else if (!cleanTweet) {
            results.push({ prompt, tweet: '', error: error || 'No tweet generated.' });
        } else {
            results.push({ prompt, tweet: cleanTweet, error: null });
        }
    }
    res.json({ success: true, results });
});


app.post('/schedule-bulk-tweets', async (req, res) => {
    const { tweets, scheduleType, times, userName, twitterApiKey, twitterApiSecret, twitterAccessToken, twitterAccessSecret, dates } = req.body;
    if (!Array.isArray(tweets) || tweets.length === 0) {
        return res.status(400).json({ success: false, message: 'No tweets provided.' });
    }
    if (!['once', 'twice', 'four'].includes(scheduleType)) {
        return res.status(400).json({ success: false, message: 'Invalid schedule type.' });
    }
    if (!Array.isArray(times) || times.length === 0 || times.some(t => !t)) {
        return res.status(400).json({ success: false, message: 'Invalid times.' });
    }
    // dates: optional array of date strings (YYYY-MM-DD), one per tweet or one for all
    try {
        const now = new Date();
        let scheduledCount = 0;
        for (let i = 0; i < tweets.length; i++) {
            const { prompt, tweet } = tweets[i];
            // Calculate scheduled times for each tweet
            let scheduledTimes = [];
            if (scheduleType === 'once') {
                scheduledTimes = [times[0]];
            } else if (scheduleType === 'twice') {
                scheduledTimes = [times[0], times[1]];
            } else if (scheduleType === 'four') {
                scheduledTimes = [times[0], times[1], times[2], times[3]];
            }
            // Determine date for this tweet (from dates array, or fallback)
            let tweetDate = null;
            if (Array.isArray(dates) && dates.length > 0) {
                tweetDate = dates[i] || dates[0];
            }
            for (const timeStr of scheduledTimes) {
                let scheduledDate;
                if (tweetDate) {
                    // Use provided date (YYYY-MM-DD) and time
                    const [year, month, day] = tweetDate.split('-').map(Number);
                    const [hours, minutes] = timeStr.split(':').map(Number);
                    scheduledDate = new Date(year, month - 1, day, hours, minutes, 0, 0);
                    // If scheduledDate is in the past, move to next day
                    if (scheduledDate < now) {
                        scheduledDate.setDate(scheduledDate.getDate() + 1);
                    }
                } else {
                    // Fallback: today or next available day
                    const [hours, minutes] = timeStr.split(':').map(Number);
                    scheduledDate = new Date(now);
                    scheduledDate.setHours(hours, minutes, 0, 0);
                    if (scheduledDate < now) {
                        scheduledDate.setDate(scheduledDate.getDate() + 1);
                    }
                }
                await ScheduledTweet.create({
                    userName,
                    content: tweet,
                    imageUrl: null,
                    scheduledTime: scheduledDate,
                    status: 'pending',
                    twitterApiKey,
                    twitterApiSecret,
                    twitterAccessToken,
                    twitterAccessSecret
                });
                scheduledCount++;
            }
        }
        res.json({ success: true, message: `Scheduled ${scheduledCount} tweets.` });
    } catch (err) {
        console.error('Bulk scheduling error:', err);
        res.status(500).json({ success: false, message: 'Failed to schedule bulk tweets.', error: err.message });
    }
});
// --- Bulk scheduling endpoint (must be after app and models are initialized) ---
// Place this near other route definitions, after /schedule-tweet


// Start server
app.listen(PORT, () => {
    console.log(`Server is running on http://0.0.0.0:${PORT}`);
});
